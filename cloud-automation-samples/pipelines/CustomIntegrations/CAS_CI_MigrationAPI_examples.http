#
# VMware Cloud Automation Pipeline Sample
#
# Copyright 2019 VMware, Inc. All rights reserved
#
# The BSD-2 license (the "License") set forth below applies to all parts of the
# Cloud-automation-samples Code project. You may not use this file except in compliance
# with the License.
#
# BSD-2 License
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
# 
# Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# CAS API Token
@refreshToken = "0YDGPf8HxtmARx4UttQUgmoDMegc3L3CBSzw45p6Lu1nygbY2zW17Aslm60z2KDa"
//"V9VUn2nNIv7Q06dm4fTs9ZJdrdcXQM9k2ZwhkDRKAFCyDuhNe6Weclk5CZ25Fk7s"




@bearer ={{login.response.body.token}}

### login

# @name login
POST https://api.mgmt.cloud.vmware.com/iaas/login HTTP/1.1
Accept: application/json
Content-Type: application/json  

{"refreshToken": {{refreshToken}} }

### 



### Codestream - Get Integrations
GET https://api.mgmt.cloud.vmware.com/pipeline/api/custom-integrations
Accept: application/json
Authorization: Bearer {{bearer}}


### GetResourceAddress
GET https://api.mgmt.cloud.vmware.com/pipeline/api/custom-integrations/787f35169e1ac27558d3988a44302
Accept: application/json
Authorization: Bearer {{bearer}}

### GetResourceAddress
GET https://api.mgmt.cloud.vmware.com/pipeline/api/custom-integrations/4b0d98bac96ed87558d65a87db812/versions
Accept: application/json
Authorization: Bearer {{bearer}}
Content-Type: application/json



### Post - GetResourceAddress

POST https://api.mgmt.cloud.vmware.com/pipeline/api/custom-integrations
Accept: application/json
Authorization: Bearer {{bearer}}
Content-Type: application/json

{
  "description": "",
  "status": "NONE",
  "yaml": "---\r\nruntime: \"nodejs\"\r\ncode: |\r\n    var context = require(\"./context.js\")\r\n    let ip = \"\" ;\r\n    const deploymentDet = context.getInput(\"deploymentDetails\");\r\n    const node = context.getInput(\"nodeName\");\r\n    \r\n    //console.log(deploymentDet);\r\n    \r\n    const deployment = JSON.parse(deploymentDet);\r\n    const resources = deployment.resources\r\n    console.log(\"resources: \" + resources.length);\r\n    \r\n    for(let i = 0; i < resources.length;i++){\r\n    \r\n        if(resources[i].name.indexOf(node) != -1){\r\n\r\n            ip =  resources[i].properties.address\r\n        \r\n        }\r\n    }\r\n\r\n    context.setOutput(\"ipAddress\", ip);\r\n\r\ninputProperties:\r\n  - name: deploymentDetails\r\n    type: text\r\n    title: deploymentDetails\r\n    placeHolder: deploymentDetails\r\n    bindable: true\r\n    labelInfo: true\r\n    labelMessage: parse deployment details to get IP\r\n  - name: nodeName\r\n    type: text\r\n    title: nodeName\r\n    placeHolder: nodeName\r\n    bindable: true\r\n    labelInfo: true\r\n    labelMessage: resource node name\r\noutputProperties:\r\n  - name: ipAddress\r\n    type: label\r\n    title: IP Address\r\n    ",
  "version": "draft",
  "name": "GetResourceAddress",
  "kind": "CustomIntegration",
  "tags": [],
  "_link": "/pipeline/api/custom-integrations/787f35169e1ac27558d3988a44302",
  "_createdBy": "slynch",
  "_updatedBy": "slynch",
  "_updateTimeInMicros": 1562653791569000
}

### Post - GetResourceAddress versions

POST https://api.mgmt.cloud.vmware.com/pipeline/api/custom-integrations/4b0d98bac96ed87558d65a87db812/versions/

{
      "status": "RELEASED",
      "yaml": "---\r\nruntime: \"nodejs\"\r\ncode: |\r\n    var context = require(\"./context.js\")\r\n    let ip = \"\" ;\r\n    const deploymentDet = context.getInput(\"deploymentDetails\");\r\n    const node = context.getInput(\"nodeName\");\r\n    \r\n    //console.log(deploymentDet);\r\n    \r\n    const deployment = JSON.parse(deploymentDet);\r\n    const resources = deployment.resources\r\n    console.log(\"resources: \" + resources.length);\r\n    \r\n    for(let i = 0; i < resources.length;i++){\r\n    \r\n        if(resources[i].name.indexOf(node) != -1){\r\n\r\n            ip =  resources[i].properties.address\r\n        \r\n        }\r\n    }\r\n\r\n    context.setOutput(\"ipAddress\", ip);\r\n\r\ninputProperties:\r\n  - name: deploymentDetails\r\n    type: text\r\n    title: deploymentDetails\r\n    placeHolder: deploymentDetails\r\n    bindable: true\r\n    labelInfo: true\r\n    labelMessage: parse deployment details to get IP\r\n  - name: nodeName\r\n    type: text\r\n    title: nodeName\r\n    placeHolder: nodeName\r\n    bindable: true\r\n    labelInfo: true\r\n    labelMessage: resource node name\r\noutputProperties:\r\n  - name: ipAddress\r\n    type: label\r\n    title: IP Address\r\n    ",
      "version": "1.0",
      "name": "GetResourceAddress",
      "kind": "CustomIntegration",
      "tags": [],
      "_link": "/pipeline/api/custom-integrations/4b0d98bac96ed87558d65a87db812",
}



### Get SlackThread CI
GET https://api.mgmt.cloud.vmware.com/pipeline/api/custom-integrations/bdbed50f9a071e7558b79f7c3c7e2
Accept: application/json
Authorization: Bearer {{bearer}}

#response body
#\Assets\Codestream\CustomIntegrations\SlackBotThreadedAttachments.json

### Get SlackThread CI versions
GET https://api.mgmt.cloud.vmware.com//pipeline/api/custom-integrations/bdbed50f9a071e7558b79f7c3c7e2/versions
Accept: application/json
Authorization: Bearer {{bearer}}

###


### Get Deployment CI
GET https://api.mgmt.cloud.vmware.com/pipeline/api/custom-integrations/b584083a85ebea7558b18ffb8affc
Accept: application/json
Authorization: Bearer {{bearer}}

#Assets\Codestream\CustomIntegrations\deployment.json

### Get Deployment CI - Versions

GET https://api.mgmt.cloud.vmware.com/pipeline/api/custom-integrations/b584083a85ebea7558b18ffb8affc/versions
Accept: application/json
Authorization: Bearer {{bearer}}

### - Create deployment CI
POST https://api.mgmt.cloud.vmware.com/pipeline/api/custom-integrations
Accept: application/json
Authorization: Bearer {{bearer}}

{
	"description": "",
	"status": "NONE",
	"yaml": "---\r\nruntime: \"nodejs\"\r\ncode: |\r\n    var context = require(\"./context.js\")\r\n    let ip = \"\" ;\r\n    const deploymentDet = context.getInput(\"deploymentDetails\");\r\n    const node = context.getInput(\"nodeName\");\r\n    \"\"\r\n    //console.log(deploymentDet);\r\n    \r\n    const deployments = JSON.parse(deploymentDet);\r\n    \r\n    console.log(\"deployments: \" + deployments.length);\r\n    \r\n    for(let i = 0; i < deployments.length;i++){\r\n    \r\n        if(deployments[i] && deployments[i].hasOwnProperty('resources') ){\r\n            console.log(JSON.stringify(deployments[i]));\r\n            ip = deployments[i]['resources'][node] ? deployments[i]['resources'][node]['address'] : deployments[i]['resources'][node+'[0]']['address'] ;\r\n            break;\r\n        \r\n        }\r\n    }\r\n    \r\n\r\n    context.setOutput(\"ipAddress\", ip);\r\n\r\ninputProperties:\r\n  - name: deploymentDetails\r\n    type: text\r\n    title: deploymentDetails\r\n    placeHolder: deploymentDetails\r\n    bindable: true\r\n    labelInfo: true\r\n    labelMessage: parse deployment details to get IP\r\n  - name: nodeName\r\n    type: text\r\n    title: nodeName\r\n    placeHolder: nodeName\r\n    bindable: true\r\n    labelInfo: true\r\n    labelMessage: resource node name\r\noutputProperties:\r\n  - name: ipAddress\r\n    type: label\r\n    title: IP Address\r\n    ",
	"version": "draft",
	"name": "deployment",
	"kind": "CustomIntegration",
	"tags": [],
	"_link": "/pipeline/api/custom-integrations/b584083a85ebea7558b18ffb8affc",
	"_createdBy": "slynch",
	"_updatedBy": "slynch",
	"_updateTimeInMicros": 1561555479511001
}

### 

GET https://api.mgmt.cloud.vmware.com/pipeline/api/custom-integrations
Accept: application/json
Authorization: Bearer {{bearer}}

### - Create deployment CI version
POST https://api.mgmt.cloud.vmware.com/pipeline/api/custom-integrations/9f8565a716f3307558cc723b5e102/versions
Accept: application/json
Authorization: Bearer {{bearer}}

{
      "description": "",
      "status": "RELEASED",
      "yaml": "---\r\nruntime: \"nodejs\"\r\ncode: |\r\n    var context = require(\"./context.js\")\r\n    let ip = \"\" ;\r\n    var deploymentDet = context.getInput(\"deploymentDetails\");\r\n    var node = context.getInput(\"nodeName\");\r\n    \"\"\r\n    //console.log(deploymentDet);\r\n    \r\n    const deployments = JSON.parse(deploymentDet);\r\n    \r\n    console.log(\"deployments: \" + deployments.length);\r\n    \r\n    for(let i = 0; i < deployments.length;i++){\r\n    \r\n        \r\n        if(deployments[i] && deployments[i].hasOwnProperty('resources') ){\r\n            console.log(JSON.stringify(deployments[i]));\r\n            ip = deployments[i]['resources'][node] ? deployments[i]['resources'][node]['address'] : deployments[i]['resources'][node+'[0]']['address'] ;\r\n            break;\r\n        \r\n        }\r\n    }\r\n    \r\n    //const ip = deployment['resources'][node] ? deployment['resources'][node]['address'] : deployment['resources'][node+'[0]']['address'] ;\r\n\r\n    context.setOutput(\"ipAddress\", ip);\r\n\r\ninputProperties:\r\n  - name: deploymentDetails\r\n    type: text\r\n    title: deploymentDetails\r\n    placeHolder: deploymentDetails\r\n    bindable: true\r\n    labelInfo: true\r\n    labelMessage: parse deployment details to get IP\r\n  - name: nodeName\r\n    type: text\r\n    title: nodeName\r\n    placeHolder: nodeName\r\n    bindable: true\r\n    labelInfo: true\r\n    labelMessage: resource node name\r\noutputProperties:\r\n  - name: ipAddress\r\n    type: label\r\n    title: IP Address\r\n    ",
      "version": "2.80",
      "name": "deployment",
      "kind": "CustomIntegration",
      "tags": [],
      "_link": "/pipeline/api/custom-integrations/3a4523f5b76d027558c396cde45e2",
      "_createdBy": "slynch",
      "_updatedBy": "slynch",
      "_updateTimeInMicros": 1561553151700000
    }
###


### - Create Slack CI
POST https://api.mgmt.cloud.vmware.com/pipeline/api/custom-integrations
Accept: application/json
Authorization: Bearer {{bearer}}

{
	"description": "formatting fix",
	"status": "NONE",
	"yaml": "---\r\nruntime: \"nodejs\"\r\ncode: |\r\n    var https = require('https');\r\n    var context = require(\"./context.js\")\r\n    \r\n    //Get the entered message from task config page and assign it to message var\r\n    var message = context.getInput(\"message\");\r\n    var parentMessage = context.getInput(\"parentMessage\");\r\n    var channel = context.getInput(\"channel\");\r\n    var auth_token = context.getInput(\"authToken\");\r\n    var slackThread = context.getInput(\"slackThread\");\r\n    var colorHex = context.getInput(\"colorHex\");\r\n    var messageHeading = context.getInput(\"messageHeading\");\r\n    \r\n    var slackPayload = JSON.stringify(\r\n    {\r\n        channel: channel, // Slack user or channel, where you want to send the message\r\n        text: parentMessage,\r\n        thread_ts: slackThread,\r\n        attachments: [\r\n            {\r\n                \"fallback\": message,\r\n                \"color\": colorHex,\r\n                \"title\": messageHeading,\r\n                \"text\": message,\r\n                \"ts\": slackThread\r\n            }\r\n        ]\r\n    });\r\n\r\n    const options = {\r\n        hostname: 'slack.com',\r\n        port: 443,\r\n        path: '/api/chat.postMessage',\r\n        method: 'POST',\r\n        headers: {\r\n        'Content-Type': 'application/json; charset=utf-8',\r\n        'Content-Length': Buffer.byteLength(slackPayload),\r\n        \"Authorization\": \"Bearer \" + auth_token\r\n    }\r\n    };\r\n    \r\n    // Makes a https request and sets the output with statusCode which \r\n    // will be displayed in task result page after execution\r\n    \r\n    const req = https.request(options, (res) => {\r\n        //    context.setOutput(\"statusCode\", res.statusCode);\r\n        let data = '';\r\n\r\n        // A chunk of data has been recieved.\r\n        res.on('data', (chunk) => {\r\n            data += chunk;\r\n        });\r\n        \r\n        console.log(res.statusCode)\r\n        context.setOutput(\"statusCode\", res.statusCode);\r\n        \r\n        \r\n        res.on('end', () => {\r\n            var response = JSON.parse(data);\r\n            context.setOutput(\"slackThreadId\", response.ts)\r\n            context.setOutput(\"slackResponse\", data);\r\n        });\r\n\r\n    });\r\n\r\n    req.on('error', (e) => {\r\n    console.error(e);\r\n    });\r\n    req.write(slackPayload);\r\n    req.end();\r\ninputProperties:\r\n  - name: message\r\n    type: text\r\n    title: Message\r\n    placeHolder: Message for Slack Channel\r\n    defaultValue: Hello Slack\r\n    bindable: true\r\n    labelInfo: true\r\n    labelMessage: This message would be posted to the Slack channel\r\n  - name: parentMessage\r\n    type: text\r\n    title: parentMessage\r\n    placeHolder: parentMessage for Slack Channel\r\n    defaultValue: Hello Slack or null\r\n    bindable: true\r\n    labelInfo: true\r\n    labelMessage: This message would be posted to the Slack channel\r\n  - name: channel\r\n    type: text\r\n    title: channel\r\n    placeHolder: slack channel here\r\n    defaultValue: slack channel here\r\n    bindable: true\r\n    labelInfo: true\r\n    labelMessage: slack channel here\r\n  - name: authToken\r\n    type: text\r\n    title: authToken\r\n    placeHolder: Bot authToken\r\n    defaultValue: Bot authToken\r\n    bindable: true\r\n    labelInfo: true\r\n    labelMessage: Bot authToken\r\n  - name: slackThread\r\n    type: text\r\n    title: slackThread\r\n    placeHolder: slackThreadId\r\n    defaultValue: slackThread or null\r\n    bindable: true\r\n    labelInfo: true\r\n    labelMessage: slackThread for reposting to same thread can also be null\r\n  - name: messageHeading\r\n    type: text\r\n    title: messageHeading\r\n    placeHolder: messageHeading\r\n    defaultValue: slackThread or null\r\n    bindable: true\r\n    labelInfo: true\r\n    labelMessage: Message Heading\r\n  - name: colorHex\r\n    type: text\r\n    title: colorHex\r\n    placeHolder: colorHex\r\n    defaultValue: colorHex\r\n    bindable: true\r\n    labelInfo: true\r\n    labelMessage: Color in hex for color coding messages\r\noutputProperties:\r\n  - name: slackResponse\r\n    type: label\r\n    title: slackResponse\r\n  - name: slackThreadId\r\n    type: label\r\n    title: slackThreadId\r\n  - name: statusCode\r\n    type: label\r\n    title: Status Code",
	"version": "draft",
	"name": "SlackBotThreadedAttachments",
	"kind": "CustomIntegration",
	"tags": [],
	"_link": "/pipeline/api/custom-integrations/bdbed50f9a071e7558b79f7c3c7e2",
	"_createdBy": "slynch",
	"_updatedBy": "slynch",
	"_updateTimeInMicros": 1560733314916000
}

### - Create Slack CI version

POST https://api.mgmt.cloud.vmware.com/pipeline/api/custom-integrations/276916bc47b2e7558cc72a6af352/versions
Accept: application/json
Authorization: Bearer {{bearer}}

{
      "status": "RELEASED",
      "yaml": "---\r\nruntime: \"nodejs\"\r\ncode: |\r\n    var https = require('https');\r\n    var context = require(\"./context.js\")\r\n    \r\n    //Get the entered message from task config page and assign it to message var\r\n    var message = context.getInput(\"message\");\r\n    var parentMessage = context.getInput(\"parentMessage\");\r\n    var channel = context.getInput(\"channel\");\r\n    var auth_token = context.getInput(\"authToken\");\r\n    var slackThread = context.getInput(\"slackThread\");\r\n    var colorHex = context.getInput(\"colorHex\");\r\n    var messageHeading = context.getInput(\"messageHeading\");\r\n    \r\n    var slackPayload = JSON.stringify(\r\n    {\r\n        channel: channel, // Slack user or channel, where you want to send the message\r\n        text: parentMessage,\r\n        thread_ts: slackThread,\r\n        attachments: [\r\n            {\r\n                \"fallback\": message,\r\n                \"color\": colorHex,\r\n                \"title\": messageHeading,\r\n                \"text\": message,\r\n                \"ts\": slackThread\r\n            }\r\n        ]\r\n    });\r\n\r\n    const options = {\r\n        hostname: 'slack.com',\r\n        port: 443,\r\n        path: '/api/chat.postMessage',\r\n        method: 'POST',\r\n        headers: {\r\n        'Content-Type': 'application/json; charset=utf-8',\r\n        'Content-Length': Buffer.byteLength(slackPayload),\r\n        \"Authorization\": \"Bearer \" + auth_token\r\n    }\r\n    };\r\n    \r\n    // Makes a https request and sets the output with statusCode which \r\n    // will be displayed in task result page after execution\r\n    \r\n    const req = https.request(options, (res) => {\r\n        //    context.setOutput(\"statusCode\", res.statusCode);\r\n        let data = '';\r\n\r\n        // A chunk of data has been recieved.\r\n        res.on('data', (chunk) => {\r\n            data += chunk;\r\n        });\r\n        \r\n        console.log(res.statusCode)\r\n        context.setOutput(\"statusCode\", res.statusCode);\r\n        \r\n        \r\n        res.on('end', () => {\r\n            var response = JSON.parse(data);\r\n            context.setOutput(\"slackThreadId\", response.ts)\r\n            context.setOutput(\"slackResponse\", data);\r\n        });\r\n\r\n    });\r\n\r\n    req.on('error', (e) => {\r\n    console.error(e);\r\n    });\r\n    req.write(slackPayload);\r\n    req.end();\r\ninputProperties:\r\n  - name: message\r\n    type: text\r\n    title: Message\r\n    placeHolder: Message for Slack Channel\r\n    defaultValue: Hello Slack\r\n    bindable: true\r\n    labelInfo: true\r\n    labelMessage: This message would be posted to the Slack channel\r\n  - name: parentMessage\r\n    type: text\r\n    title: parentMessage\r\n    placeHolder: parentMessage for Slack Channel\r\n    defaultValue: Hello Slack or null\r\n    bindable: true\r\n    labelInfo: true\r\n    labelMessage: This message would be posted to the Slack channel\r\n  - name: channel\r\n    type: text\r\n    title: channel\r\n    placeHolder: slack channel here\r\n    defaultValue: slack channel here\r\n    bindable: true\r\n    labelInfo: true\r\n    labelMessage: slack channel here\r\n  - name: authToken\r\n    type: text\r\n    title: authToken\r\n    placeHolder: Bot authToken\r\n    defaultValue: Bot authToken\r\n    bindable: true\r\n    labelInfo: true\r\n    labelMessage: Bot authToken\r\n  - name: slackThread\r\n    type: text\r\n    title: slackThread\r\n    placeHolder: slackThreadId\r\n    defaultValue: slackThread or null\r\n    bindable: true\r\n    labelInfo: true\r\n    labelMessage: slackThread for reposting to same thread can also be null\r\n  - name: messageHeading\r\n    type: text\r\n    title: messageHeading\r\n    placeHolder: messageHeading\r\n    defaultValue: slackThread or null\r\n    bindable: true\r\n    labelInfo: true\r\n    labelMessage: Message Heading\r\n  - name: colorHex\r\n    type: text\r\n    title: colorHex\r\n    placeHolder: colorHex\r\n    defaultValue: colorHex\r\n    bindable: true\r\n    labelInfo: true\r\n    labelMessage: Color in hex for color coding messages\r\noutputProperties:\r\n  - name: slackResponse\r\n    type: label\r\n    title: slackResponse\r\n  - name: slackThreadId\r\n    type: label\r\n    title: slackThreadId\r\n  - name: statusCode\r\n    type: label\r\n    title: Status Code",
      "version": "1.8",
      "name": "SlackBotThreadedAttachments",
      "kind": "CustomIntegration",
      "tags": [],
      "_link": "/pipeline/api/custom-integrations/ececf5d7aa14c67558b7a8b5500a2",
      "_createdBy": "slynch",
      "_updatedBy": "slynch",
      "_updateTimeInMicros": 1560733323923000
    }

###