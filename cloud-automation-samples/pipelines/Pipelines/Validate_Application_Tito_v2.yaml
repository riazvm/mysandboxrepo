#
# VMware Cloud Automation Pipeline Sample
#
# Copyright 2019 VMware, Inc. All rights reserved
#
# The BSD-2 license (the "License") set forth below applies to all parts of the
# Cloud-automation-samples Code project. You may not use this file except in compliance
# with the License.
#
# BSD-2 License
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
# 
# Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
---
project: Commuter
kind: PIPELINE
name: Validate_Application_Tito_v2
enabled: true
description: ''
concurrency: 10
input:
  casToken: CHANGE TOKEN
  restBlueprintId: 4e815666-1eaf-4ed5-bed2-73bf7187e54b
  restCloud_Target: target:aws
  colorGood: '#36a64f'
  restSSHkey: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDC2sbYtHu65GhgEYk8kUCzCFBWlKM24hMiZwcwJy0mws9KwsCTEEH+aOlt0BvMcYchhV5I2Bxi3nS05vSXMZycoSG8t6Cw0Cw2IYHYNYzl8XCQ5QUtFDXoEK1eGEQTeXissTkR15Fk2CzBYXoGNUKe7mt6TQGKMpwXwNDZe2ZlJXRGsiTgLCdLehYUS+qIIOirQqD2VjBPVfp1ckCztgIydiQoZOilMAQBnJ6KGMr4DiuF8zevgFl4OcFDm7eeuP9cOSYXRtCyAtrB5xvYNGcf+AiMz7yun/HLwMkXab8Nzup1I+90GVtouMddpSp3gZyPpC7CVeToCebhe+EGUjzR
    riazm@riazm-a01.vmware.com
  sitePort: '80'
  sshHost: 52.23.210.159
  testSpecPath: /home/testrunner/titoactions.spec.js
  restWavefrontProxy: CHANGE PROXY
  colorWarn: '#ff0000'
  GIT_CHANGE_SUBJECT: ''
  abxRoute53id: CHANGE ROUTE 53 ID
  titoRoute53: http://tito.vradiate.com/Tito/
  loadTestUsers: '50'
  restABXZoneId: ZMM467Q1YQ2XS
  proceed: 'true'
  loadHatchRate: '2'
  slackOauthToken: CHANGE TOKEN
  wavefrontDashboard: https://vmware.wavefront.com/u/phQGBGjz91
  slackChannel: operationsaas-sre
  restMapsKey: CHANGE KEY
  restBlueprintVersion: '1.4'
  webResourceName: Cloud_LoadBalancer_1
  GIT_EVENT_OWNER_NAME: ''
  restProjectId: 36ab2efb-5201-46a3-8a0a-7584e4ba5612
  restABXaliasHostedZoneId: Z35SXDOTRQ7X7K
  sshHostOnPrem: 172.30.22.59
  websiteBase: /Tito/
  restABXTitoFQDN: tito.vradiate.com
output:
  frontendIP: ${Deploy.Get Website IP.output.properties.ipAddress}
starred:
  input: restCloud_Target
ciWorkspace:
  endpoint: Shared Docker Host
  image: node:10
  registry: ''
  path: ''
  cache:
  - ''
stageOrder:
- Deploy
- Test
- Release
stages:
  Test:
    taskOrder:
    - Cypress - UI Validation,Cypress - UI Validation-vSphere
    - SlackNotifyUI-pass,SlackNotifyUI-fail,SlackNotifyUI-Null
    - Locust Load Test,Locust Load Test vSphere
    - SlackNotifyLocust-pass,SlackNotifyLocust-fail,SlackNotifyLocust-Null
    - CondiationalScaleOut
    - CASTokenRefresh
    - Scale_Out FrontEnd
    - Locust Load Test-1
    tasks:
      SlackNotifyLocust-pass:
        type: Custom
        preCondition: ${Test.Locust Load Test.output.exitCode} == 0 || ${Test.Locust Load Test vSphere.output.exitCode}
          == 0
        input:
          name: SlackBotThreadedAttachments
          version: '1.0'
          properties: {
            channel: '${input.slackChannel}',
            message: ' :tada: *Successful* -  completion of Locust Load test automation for http://${Deploy.Get
              Website IP.output.properties.ipAddress}, you can view load test metrics in Wavefront ${input.wavefrontDashboard}',
            colorHex: '${input.colorGood}',
            authToken: '${input.slackOauthToken}',
            slackThread: '${Deploy.SlackNotify.output.properties.slackThreadId}',
            parentMessage: '',
            messageHeading: Codestream Notification
          }
      Cypress - UI Validation:
        type: SSH
        ignoreFailure: true
        preCondition: ${input.restCloud_Target} != "target:vsphere"
        input:
          privatekey: ''
          password: CHANGE PASSWORD
          workingDirectory: ''
          environmentVariables: {
            }
          host: ${input.sshHost}
          arguments: [
            ]
          passphrase: ''
          script: "export SLACK_USER_TOKEN=\"${input.slackOauthToken}\"\r\nexport SLACK_THREAD=\"${Deploy.SlackNotify.output.properties.slackThreadId}\"\
            \r\nexport PATH=$PATH:/usr/bin/:/usr/local/bin/:/home/testrunner/node_modules/.bin/\r\nsudo\
            \ -E /home/testrunner/node_modules/.bin/cypress run --spec ${input.testSpecPath} --config\
            \ video=false --reporter json --env host=http://${Deploy.Get Website IP.output.properties.ipAddress}${input.websiteBase}\
            \ && echo $?"
          username: testrunner
      SlackNotifyUI-fail:
        type: Custom
        preCondition: ${Test.Cypress - UI Validation.output.exitCode} > 0 || ${Test.Cypress - UI Validation-vSphere.output.exitCode}
          > 0
        input:
          name: SlackBotThreadedAttachments
          version: '1.0'
          properties: {
            channel: '${input.slackChannel}',
            message: Cypress UI validation failed tests.,
            colorHex: '${input.colorWarn}',
            authToken: '${input.slackOauthToken}',
            slackThread: '${Deploy.SlackNotify.output.properties.slackThreadId}',
            parentMessage: '',
            messageHeading: Codestream Notification
          }
      Locust Load Test-1:
        type: SSH
        ignoreFailure: true
        preCondition: ${input.proceed} == "false" && ${Test.Locust Load Test.output.exitCode} > 0 && ${Test.Locust
          Load Test.output.exitCode} > 0 && ${Test.Cypress - UI Validation.output.exitCode} == 0
        endpoints:
          agent: SSH Host
        input:
          privatekey: ''
          password: CHANGE PASSWORD
          workingDirectory: ''
          environmentVariables: {
            }
          host: ${input.sshHost}
          arguments: [
            ]
          passphrase: ''
          script: |-
            export WAVEFRONT_PROXY='${input.restWavefrontProxy}'
            export WEBSITE_ADDRESS="${Deploy.Get Website IP.output.properties.ipAddress}"
            export PATH=$PATH:/usr/bin/:/usr/local/bin/

            sudo -E locust -f /usr/local/bin/locust_files/locustWavefront.py -c ${input.loadTestUsers} -r ${input.loadHatchRate} -t 3m --no-web --only-summary --host http://${Deploy.Get Website IP.output.properties.ipAddress}
          username: testrunner
      SlackNotifyUI-pass:
        type: Custom
        ignoreFailure: true
        preCondition: ${Test.Cypress - UI Validation.output.exitCode} == 0 || ${Test.Cypress - UI Validation-vSphere.output.exitCode}
          == 0
        input:
          name: SlackBotThreadedAttachments
          version: '1.0'
          properties: {
            channel: '${input.slackChannel}',
            message: ':tada: *Successful* -  completion of Cypress UI test automation for http://${Deploy.Get
              Website IP.output.properties.ipAddress}${input.websiteBase} ',
            colorHex: '${input.colorGood}',
            authToken: '${input.slackOauthToken}',
            slackThread: '${Deploy.SlackNotify.output.properties.slackThreadId}',
            messageHeading: Codestream Notification
          }
      Locust Load Test:
        type: SSH
        ignoreFailure: true
        preCondition: ${input.restCloud_Target} != "target:vsphere"
        endpoints:
          agent: SSH Host
        input:
          privatekey: ''
          password: CHANGE PASSWORD
          workingDirectory: ''
          environmentVariables: {
            }
          host: ${input.sshHost}
          arguments: [
            ]
          passphrase: ''
          script: |-
            export WAVEFRONT_PROXY='${input.restWavefrontProxy}'
            export WEBSITE_ADDRESS="${Deploy.Get Website IP.output.properties.ipAddress}"
            export PATH=$PATH:/usr/bin/:/usr/local/bin/

            sudo -E locust --no-web -c ${input.loadTestUsers} -r ${input.loadHatchRate} -f /usr/local/bin/locust_files/locustWavefront.py -t 3m --only-summary --host http://${Deploy.Get Website IP.output.properties.ipAddress}
          username: testrunner
      Locust Load Test vSphere:
        type: SSH
        ignoreFailure: true
        preCondition: ${input.restCloud_Target} == "target:vsphere"
        endpoints:
          agent: SSH Host
        input:
          privatekey: ''
          password: s2enc~QLJhR9ZEpy6UAgaHLj+mGA==
          workingDirectory: ''
          environmentVariables: {
            }
          host: ${input.sshHostOnPrem}
          arguments: [
            ]
          passphrase: ''
          script: |-
            export WAVEFRONT_PROXY='${input.restWavefrontProxy}'
            export WEBSITE_ADDRESS="${Deploy.Get Website IP.output.properties.ipAddress}"
            export PATH=$PATH:/usr/bin/:/usr/local/bin/

            sudo -E locust --no-web -c ${input.loadTestUsers} -r ${input.loadHatchRate} -f /usr/local/bin/locust_files/locustWavefront.py -t 3m --only-summary --host http://${Deploy.Get Website IP.output.properties.ipAddress}
          username: testrunner
      CondiationalScaleOut:
        type: UserOperation
        preCondition: ${input.proceed} == "false" && ${Test.Locust Load Test.output.exitCode} > 0 && ${Test.Cypress
          - UI Validation.output.exitCode} == 0
        input:
          summary: Failed Load Test
          pipelineName: ${name}
          expirationInDays: 3
          approverGroups: [
            slynch@vmware.com]
          approvers: [
            slynch@vmware.com]
          description: '        Your deployment failed the Locust web load test with ${input.loadTestUsers}
            test users per second, at a create rate of ${input.loadHatchRate}.'
          sendemail: false
      SlackNotifyLocust-fail:
        type: Custom
        preCondition: ${Test.Locust Load Test.output.exitCode} > 0 || ${Test.Locust Load Test vSphere.output.exitCode}
          > 0
        input:
          name: SlackBotThreadedAttachments
          version: '1.0'
          properties: {
            channel: '${input.slackChannel}',
            message: '*Failed* -  completion of Locust Load test automation for http://${Deploy.Get Website
              IP.output.properties.ipAddress}/tito/, you can view load test metrics in Wavefront ${input.wavefrontDashboard}.
              The pipeline has been pause to allow you to analyse the result, you can optionally scale
              outy our deployment and retest. To proceed with scale out visit ${executionUrl}',
            colorHex: '${input.colorWarn}',
            authToken: '${input.slackOauthToken}',
            slackThread: '${Deploy.SlackNotify.output.properties.slackThreadId}',
            parentMessage: '',
            messageHeading: Codestream Notification
          }
      SlackNotifyUI-Null:
        type: Custom
        preCondition: '"${Test.Cypress - UI Validation.output.exitCode}" == "null" || "${Test.Cypress
          - UI Validation-vSphere.output.exitCode}" == "null"'
        input:
          name: SlackBotThreadedAttachments
          version: '1.0'
          properties: {
            channel: '${input.slackChannel}',
            message: 'Cypress UI validation failed to start, check ssh connectivty',
            colorHex: '${input.colorWarn}',
            authToken: '${input.slackOauthToken}',
            slackThread: '${Deploy.SlackNotify.output.properties.slackThreadId}',
            parentMessage: '',
            messageHeading: Codestream Notification
          }
      SlackNotifyLocust-Null:
        type: Custom
        preCondition: '"${Test.Locust Load Test.output.exitCode}" == "null" || "${Test.Locust Load Test
          vSphere.output.exitCode}" == "null"'
        input:
          name: SlackBotThreadedAttachments
          version: '1.0'
          properties: {
            channel: '${input.slackChannel}',
            message: '*Did not execute* - Locust Load test failed to start, check SSH connectivity',
            colorHex: '${input.colorWarn}',
            authToken: '${input.slackOauthToken}',
            slackThread: '${Deploy.SlackNotify.output.properties.slackThreadId}',
            parentMessage: '',
            messageHeading: Codestream Notification
          }
      CASTokenRefresh:
        type: REST
        preCondition: ${Test.Locust Load Test.output.exitCode} > 0 && ${Test.Cypress - UI Validation.output.exitCode}
          == 0
        input:
          headers: {
            Accept: application/json,
            Content-Type: application/json
          }
          payload: '{"refreshToken": ${input.casToken} }'
          action: post
          url: https://api.mgmt.cloud.vmware.com/iaas/login
      Cypress - UI Validation-vSphere:
        type: SSH
        ignoreFailure: true
        preCondition: ${input.restCloud_Target} == "target:vsphere"
        endpoints:
          agent: SSH Host
        input:
          privatekey: ''
          password: CHANGE PASSWORD
          workingDirectory: ''
          environmentVariables: {
            }
          host: ${input.sshHostOnPrem}
          arguments: [
            ]
          passphrase: ''
          script: "export SLACK_USER_TOKEN=\"${input.slackOauthToken}\"\r\nexport SLACK_THREAD=\"${Deploy.SlackNotify.output.properties.slackThreadId}\"\
            \r\nexport PATH=$PATH:/usr/bin/:/usr/local/bin/:/home/testrunner/node_modules/.bin/\r\nsudo\
            \ -E /home/testrunner/node_modules/.bin/cypress run --spec ${input.testSpecPath} --config\
            \ video=false --reporter json --env host=http://${Deploy.Get Website IP.output.properties.ipAddress}${input.websiteBase}\
            \ && echo $?"
          username: testrunner
      Scale_Out FrontEnd:
        type: REST
        preCondition: ${input.proceed} == "false" && ${Test.Locust Load Test.output.exitCode} > 0 && ${Test.Cypress
          - UI Validation.output.exitCode} == 0
        input:
          headers: {
            Accept: application/json,
            Content-Type: application/json,
            Authorization: 'Bearer ${Test.CASTokenRefresh.output.responseBody.token}'
          }
          payload: |-
            {
              "actionId": "Deployment.Update",
              "inputs": {
                "FECount": 3,
                "application": "tito",
                "environment": "dev",
                "cloud_target": "${input.restCloud_Target}",
                "wavefront_proxy": "${input.restWavefrontProxy}"
              },
              "reason": "scale out"
            }
          action: post
          url: https://api.mgmt.cloud.vmware.com/deployment/api/deployments/${Deploy.checkDeployment.output.responseBody.deploymentId/requests
  Deploy:
    taskOrder:
    - SlackNotify,Get_CASToken
    - MultiCloud REST
    - checkDeployment
    - getDeployment
    - Get Website IP
    - Poll Application
    tasks:
      getDeployment:
        type: REST
        input:
          headers: {
            Accept: application/json,
            Content-Type: application/json,
            Authorization: 'Bearer ${Deploy.Get_CASToken.output.responseBody.token}'
          }
          action: get
          url: https://api.mgmt.cloud.vmware.com/deployment/api/deployments/${Deploy.checkDeployment.output.responseBody.deploymentId}?expandResources=true
      SlackNotify:
        type: Custom
        ignoreFailure: true
        input:
          name: SlackBotThreadedAttachments
          version: '1.0'
          properties: {
            channel: '${input.slackChannel}',
            message: 'A new deploy has been triggered by git commit "${input.GIT_CHANGE_SUBJECT}" by ${input.GIT_EVENT_OWNER_NAME},
              you can monitor pipeline progress here ${executionUrl}',
            colorHex: '${input.colorGood}',
            authToken: '${input.slackOauthToken}',
            slackThread: '',
            messageHeading: Codestream Notification
          }
      checkDeployment:
        type: POLL
        input:
          ignoreFailure: true
          headers: {
            Accept: application/json,
            Content-Type: application/json,
            Authorization: 'Bearer ${Deploy.Get_CASToken.output.responseBody.token}'
          }
          exitCriteria: {
            failure: ' status == "FAILED" ||  status == "CANCELLED"',
            success: ' status == "FINISHED"'
          }
          pollCount: 30
          pollIntervalSeconds: '60'
          url: https://api.mgmt.cloud.vmware.com/blueprint/api/blueprint-requests/${Deploy.MultiCloud
            REST.output.responseBody.id}
      MultiCloud REST:
        type: REST
        input:
          headers: {
            Accept: application/json,
            Content-Type: application/json,
            Authorization: 'Bearer ${Deploy.Get_CASToken.output.responseBody.token}'
          }
          payload: |-
            {
              "projectId": "${input.restProjectId}",
              "reason": "pipeline build",
              "description": "Tito Application Pipeline Build - ${input.restCloud_Target}",
              "plan": false,
              "destroy": false,
              "ignoreDeleteFailures": false,
              "simulate": false,
              "tags": [],
              "blueprintId": "${input.restBlueprintId}",
              "blueprintVersion": ${input.restBlueprintVersion},
              "inputs": {
                "FECount": 1,
                "application": "tito",
                "environment": "production",
                "Azureresourcegrp": "",
                "mapsapikey": "${input.restMapsKey}",
                 "SSHKey": "${input.restSSHkey}",
                "cloud_target": "${input.restCloud_Target}",
                "wavefront_proxy": "${input.restWavefrontProxy}"
              }
            }
          action: post
          url: https://api.mgmt.cloud.vmware.com/blueprint/api/blueprint-requests
      Get_CASToken:
        type: REST
        input:
          headers: {
            Accept: application/json,
            Content-Type: application/json
          }
          payload: '{"refreshToken": ${input.casToken} }'
          action: post
          url: https://api.mgmt.cloud.vmware.com/iaas/login
      Get Website IP:
        type: Custom
        ignoreFailure: true
        input:
          name: GetResourceAddress
          version: '1.0'
          properties: {
            nodeName: '${input.webResourceName}',
            deploymentDetails: '${Deploy.getDeployment.output.responseBody}'
          }
      Poll Application:
        type: CI
        input:
          process: [
            ]
          steps: [
            '#!/bin/bash',
            set +e,
            attempt_counter=0,
            max_attempts=60,
            '',
            while true,
            do,
            '  STATUS=$(curl -s -f -o /dev/null -w ''%{http_code}'' http://${Deploy.Get Website IP.output.properties.ipAddress}:${input.sitePort}${input.websiteBase})',
            '  if [ $STATUS -eq 200 ]; then',
            '    echo "Got 200! All done!"',
            '    break',
            '  else',
            '    echo "Got $STATUS :( Not done yet..."',
            '  fi',
            '  attempt_counter=$(($attempt_counter+1))',
            '  sleep 10',
            '  if [ $attempt_counter -eq $max_attempts ];then',
            '      echo "Max attempts reached"',
            '      exit 1',
            '  ',
            done]
          export: [
            ]
          artifacts: [
            ]
  Release:
    taskOrder:
    - Get_CAS_Token
    - BlueGreenRoute53ABX
    - Poll_ABX_Completion
    - SlackNotifyRoute53
    tasks:
      Poll_ABX_Completion:
        type: POLL
        preCondition: '${input.restCloud_Target} == "target:aws"  && ((${Test.Cypress - UI Validation.output.exitCode}
          == 0 && ${Test.Locust Load Test.output.exitCode} == 0 ) || (${Test.Cypress - UI Validation.output.exitCode}
          == 0 && ${Test.Locust Load Test-1.output.exitCode} == 0 )) '
        input:
          ignoreFailure: true
          headers: {
            Accept: application/json,
            Content-Type: application/json,
            Authorization: 'Bearer ${Release.Get_CAS_Token.output.responseBody.token}'
          }
          exitCriteria: {
            failure: runState == "FAILED" || runState == "DEPLOYMENT_FAILED" || runState == "HANDLING_ERROR"
              || runState == "CANCELLED",
            success: runState == "COMPLETED"
          }
          pollCount: 30
          pollIntervalSeconds: '60'
          url: https://api.mgmt.cloud.vmware.com/abx/api/resources/action-runs/${Release.BlueGreenRoute53ABX.output.responseBody.id}
      SlackNotifyRoute53:
        type: Custom
        preCondition: ${input.restCloud_Target} == "target:aws"  && ${Test.Locust Load Test.output.exitCode}
          == 0
        input:
          name: SlackBotThreadedAttachments
          version: '1.0'
          properties: {
            channel: '${input.slackChannel}',
            message: ' :tada: *Successful* - Completed Route53 DNS failover to the newly deployed Tito
              application. ${input.titoRoute53}',
            colorHex: '${input.colorGood}',
            authToken: '${input.slackOauthToken}',
            slackThread: '${Deploy.SlackNotify.output.properties.slackThreadId}',
            parentMessage: '',
            messageHeading: Codestream Notification
          }
      BlueGreenRoute53ABX:
        type: REST
        ignoreFailure: true
        preCondition: '${input.restCloud_Target} == "target:aws" && ((${Test.Cypress - UI Validation.output.exitCode}
          == 0 && ${Test.Locust Load Test.output.exitCode} == 0 ) || (${Test.Cypress - UI Validation.output.exitCode}
          == 0 && ${Test.Locust Load Test-1.output.exitCode} == 0 )) '
        input:
          headers: {
            Accept: application/json,
            Content-Type: application/json,
            Authorization: 'Bearer ${Release.Get_CAS_Token.output.responseBody.token}'
          }
          payload: |-
            {
                "projectId": "${input.restProjectId}",
                "inputs": {
                "name": "${input.restABXTitoFQDN}",
                "zoneId": "${input.restABXZoneId}",
                "DNSName": "dualstack.${Deploy.Get Website IP.output.properties.ipAddress}",
                "aliasHostedZoneId": "${input.restABXaliasHostedZoneId}"
              }
            }
          action: post
          url: https://api.mgmt.cloud.vmware.com/abx/api/resources/actions/${input.abxRoute53id}/action-runs
      Get_CAS_Token:
        type: REST
        input:
          headers: {
            Accept: application/json,
            Content-Type: application/json
          }
          payload: '{"refreshToken": ${input.casToken} }'
          action: post
          url: https://api.mgmt.cloud.vmware.com/iaas/login
